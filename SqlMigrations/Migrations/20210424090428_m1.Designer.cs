// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqlMigrations;

namespace SqlMigrations.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210424090428_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("SqlMigrations.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("problemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorEmail");

                    b.HasIndex("problemId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SqlMigrations.Entities.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorEmail");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SqlMigrations.Entities.CourseUserEntity", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "UserEmail");

                    b.HasIndex("UserEmail");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("SqlMigrations.Entities.DueDateEntity", b =>
                {
                    b.Property<int>("groupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("problemSetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("TEXT");

                    b.HasKey("groupId", "problemSetId");

                    b.HasIndex("problemSetId");

                    b.ToTable("DueDates");
                });

            modelBuilder.Entity("SqlMigrations.Entities.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SqlMigrations.Entities.ProblemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GeneralDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hints")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDescription")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemoryFactor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemoryLimitInKiloBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ODescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProblemSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SampleInput")
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleOutput")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeFactor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimitInMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorEmail");

                    b.HasIndex("ProblemSetId");

                    b.ToTable("Problem");
                });

            modelBuilder.Entity("SqlMigrations.Entities.ProblemSetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("TEXT");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prerequisites")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorEmail");

                    b.HasIndex("CourseId");

                    b.ToTable("ProblemSet");
                });

            modelBuilder.Entity("SqlMigrations.Entities.ReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StaticCodeAnalysis")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SqlMigrations.Entities.SolutionEntity", b =>
                {
                    b.Property<int>("ProblemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ProblemId");

                    b.ToTable("Solution");
                });

            modelBuilder.Entity("SqlMigrations.Entities.SubmissionStatisticsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemoryTakenInKiloBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProblemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgrammingLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeTakenInMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .HasColumnType("TEXT");

                    b.Property<int>("Verdict")
                        .HasColumnType("INTEGER");

                    b.Property<string>("sourceCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserEmail");

                    b.ToTable("SubmissionStatistics");
                });

            modelBuilder.Entity("SqlMigrations.Entities.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Input")
                        .HasColumnType("TEXT");

                    b.Property<string>("Output")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProblemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("SqlMigrations.Entities.UserEntity", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.HasKey("Email");

                    b.HasIndex("GroupId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SqlMigrations.Entities.WaReportEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActualOutput")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpectedOutput")
                        .HasColumnType("TEXT");

                    b.Property<string>("Input")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WaReport");
                });

            modelBuilder.Entity("SqlMigrations.Entities.CommentEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.UserEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorEmail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SqlMigrations.Entities.ProblemEntity", "problem")
                        .WithMany("Comments")
                        .HasForeignKey("problemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.CourseEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.UserEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorEmail")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("SqlMigrations.Entities.CourseUserEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.CourseEntity", "Course")
                        .WithMany("CourseUser")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SqlMigrations.Entities.UserEntity", "User")
                        .WithMany("CourseUser")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.DueDateEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.GroupEntity", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SqlMigrations.Entities.ProblemSetEntity", "problemSet")
                        .WithMany("DueDates")
                        .HasForeignKey("problemSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.ProblemEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.UserEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorEmail")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SqlMigrations.Entities.ProblemSetEntity", "ProblemSet")
                        .WithMany("Problems")
                        .HasForeignKey("ProblemSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.ProblemSetEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.UserEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorEmail")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SqlMigrations.Entities.CourseEntity", "Course")
                        .WithMany("ProblemSets")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.ReportEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.SubmissionStatisticsEntity", "SubmissionStatistics")
                        .WithOne("Report")
                        .HasForeignKey("SqlMigrations.Entities.ReportEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.SolutionEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.ProblemEntity", "Problem")
                        .WithOne("Solution")
                        .HasForeignKey("SqlMigrations.Entities.SolutionEntity", "ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.SubmissionStatisticsEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.ProblemEntity", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SqlMigrations.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SqlMigrations.Entities.TestEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.ProblemEntity", "Problem")
                        .WithMany("Tests")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.UserEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.GroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SqlMigrations.Entities.WaReportEntity", b =>
                {
                    b.HasOne("SqlMigrations.Entities.ReportEntity", "Report")
                        .WithOne("WaReport")
                        .HasForeignKey("SqlMigrations.Entities.WaReportEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
